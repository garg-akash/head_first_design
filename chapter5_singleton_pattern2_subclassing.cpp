//generated by chatgpt
class Singleton {
protected:
    static Singleton* instance;

    Singleton() {}

public:
    static Singleton* getInstance() {
        if (instance == nullptr) {
            instance = new Singleton();
        }

        return instance;
    }

    virtual void doSomething() {
        std::cout << "Doing something in Singleton" << std::endl;
    }
};

Singleton* Singleton::instance = nullptr;

class Subclass : public Singleton {
public:
    static Subclass* getInstance() {
        if (instance == nullptr) {
            instance = new Subclass();
        }

        return static_cast<Subclass*>(instance);
    }

    void doSomething() override {
        std::cout << "Doing something in Subclass" << std::endl;
    }

    void doSomethingElse() {
        std::cout << "Doing something else in Subclass" << std::endl;
    }
};